name: GitHub Actions Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - develop
jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pnpm
        run: npm install --global pnpm

      - name: Generate backend.conf
        env:
          KEY: 'turborepo-test/develop'
          REGION: 'ap-northeast-1'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          cat <<EOF > backend.conf
          key = "${KEY}"
          region = "${REGION}"
          access_key = "${AWS_ACCESS_KEY}"
          secret_key = "${AWS_SECRET_KEY}"
          EOF
        working-directory: ./apps/api/terraform

      - name: Terraform Init
        run: terraform init -backend-config=backend.conf
        working-directory: ./apps/api/terraform

      - name: Generate terraform.tfvars
        env:
          APP_NAME: 'turborepo-test'
          ENV: 'dev'
          REGION: 'ap-northeast-1'
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          cat <<EOF > terraform.tfvars
          app_name = "${APP_NAME}"
          env = "${ENV}"
          region = "${REGION}"
          access_key = "${AWS_ACCESS_KEY}"
          secret_key = "${AWS_SECRET_KEY}"
          EOF
        working-directory: ./apps/api/terraform

      - name: Install Dependencies
        run: pnpm i
        working-directory: ./apps/api

      - name: Build Lambda Source
        run: pnpm build
        working-directory: ./apps/api/

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./apps/api/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./apps/api/terraform

      - name: Get GraphQL URL
        id: get_graphql_url
        run: echo "::set-output name=graphql_url::$(terraform output -raw graphql_url)"
        working-directory: ./apps/api/terraform

      - name: Get Api Key
        id: get_api_key
        run: echo "::set-output name=api_key::$(terraform output -raw api_key)"
        working-directory: ./apps/api/terraform

      - name: Generate .env
        run: |
          cat <<EOF > .env
          GRAPHQL_URL="${{ steps.get_graphql_url.outputs.graphql_url }}"
          API_KEY="${{ steps.get_api_key.outputs.get_api_key }}"
          EOF
        working-directory: ./apps/web

      - name: Install Vercel CLI
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
